#!/usr/bin/env bash
# bootstrap <repo-id> <build-id> <link> <git-sha>

### Environment setup

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # current direct of script

source "$DIR/lib/output.sh"

### Inputs

REPO_ID=${1:-}
BUILD_HASH=${2:-}
DOWNLOAD_URL=${3:-}
GIT_SHA=${4:-}


### Start

header "Bootstrapping build"
BUILD_DIR="$DIR/../.build/$BUILD_HASH"

### Determine immediate failures

if [ -z "$REPO_ID" ]; then
  error "REPO_ID was not provided"
  exit 1
fi

if [ -z "$BUILD_HASH" ]; then
  error "BUILD_HASH was not provided"
  exit 1
fi

if [ -z "$DOWNLOAD_URL" ]; then
  error "DOWNLOAD_URL was not provided"
  exit 1
fi

if [ -d "$BUILD_DIR" ]; then
  error "BUILD_DIR already exists, will not continue"
  exit 1
fi

### Create log file

header "Creating build directories"

LOG_DIR="$DIR/../.build/"
info "$LOG_DIR"
mkdir -p "$LOG_DIR"

LOG_FILE="$DIR/../.build/$BUILD_HASH.log"
info "$LOG_FILE"
touch "$LOG_FILE"

CACHE_DIR="$DIR/../.cache/$REPO_ID"
info "$CACHE_DIR"
mkdir -p "$CACHE_DIR"

info "$BUILD_DIR"
mkdir -p "$BUILD_DIR"

### Download, extract, version

header "Downloading code"
info "$DOWNLOAD_URL"
curl -s "$DOWNLOAD_URL" | tar -xz --strip=1 -C "$BUILD_DIR"

header "Writing SHA"
info "$GIT_SHA"
echo "$GIT_SHA" > "$BUILD_DIR/.gitsha"
